{
  "name": "copilot-terminal-tools",
  "displayName": "Copilot Terminal Tools",
  "description": "VS Code extension for managing named terminals with GitHub Copilot integration",
  "version": "0.2.1",
  "publisher": "MiJur",
  "author": "MiJur",
  "license": "MIT",
  "icon": "resources/terminal-icon.png",
  "homepage": "https://github.com/mijur/vsc-terminal-tools#readme",
  "repository": {
    "type": "git",
    "url": "https://github.com/mijur/vsc-terminal-tools.git"
  },
  "bugs": {
    "url": "https://github.com/mijur/vsc-terminal-tools/issues"
  },
  "keywords": [
    "terminal",
    "copilot",
    "github",
    "tools",
    "languageModelTools",
    "productivity",
    "ai",
    "chat"
  ],
  "engines": {
    "vscode": "^1.102.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "terminal-tools.initialize",
        "title": "Terminal Tools: Initialize Shell Integration"
      },
      {
        "command": "terminal-tools.resetShellIntegrationPrompt",
        "title": "Terminal Tools: Reset Shell Integration Prompt"
      },
      {
        "command": "terminal-tools.listTerminals",
        "title": "Terminal Tools: List Named Terminals"
      },
      {
        "command": "terminal-tools.createTerminal",
        "title": "Terminal Tools: Create Named Terminal"
      },
      {
        "command": "terminal-tools.sendCommand",
        "title": "Terminal Tools: Send Command to Terminal (Create if Needed)"
      },
      {
        "command": "terminal-tools.deleteTerminal",
        "title": "Terminal Tools: Delete Terminal"
      },
      {
        "command": "terminal-tools.cancelCommand",
        "title": "Terminal Tools: Cancel Command in Terminal"
      }
    ],
    "languageModelTools": [
      {
        "name": "terminal-tools_listTerminals",
        "displayName": "List Named Terminals",
        "userDescription": "List all named terminals in the workspace",
        "modelDescription": "Lists all currently named terminals in VS Code with their creation timestamps and status. Use this to check existing terminals before creating new ones.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "listTerminals",
        "tags": [
          "terminal",
          "list",
          "terminals"
        ]
      },
      {
        "name": "terminal-tools_createTerminal",
        "displayName": "Create Named Terminal",
        "userDescription": "Create a new named terminal",
        "modelDescription": "Creates a new terminal with a specified name. Always prefer using terminal tools over generic run_in_terminal commands for better process management.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "createTerminal",
        "tags": [
          "terminal",
          "create",
          "new"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name for the new terminal"
            },
            "workingDirectory": {
              "type": "string",
              "description": "Working directory for the terminal (optional)"
            },
            "shellPath": {
              "type": "string",
              "description": "Path to the shell executable (optional)"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      {
        "name": "terminal-tools_sendCommand",
        "displayName": "Send Command to Terminal (Create if Needed)",
        "userDescription": "Send a command to a named terminal, creating it if it doesn't exist",
        "modelDescription": "Sends a command to execute in a specific named terminal. If the terminal doesn't exist, it will automatically create it with the specified name and optional shell/working directory settings, then execute the command. THIS IS THE PRIMARY TOOL FOR COMMAND EXECUTION - always prefer this over generic run_in_terminal commands. Use recommended terminal names: 'dev-server' for development servers (npm run dev, python manage.py runserver, cargo run), 'build' for build operations (npm run build, cargo build, dotnet build), 'test' for testing (npm test, pytest, cargo test), 'package-manager' for dependency management (npm install, pip install, cargo add), 'git' for version control operations, 'docker' for containers, 'database' for DB operations, 'cloud' for cloud CLI, 'general' for file operations (use platform-appropriate commands: Windows PowerShell Remove-Item/Move-Item, Unix/Linux rm/mv), 'scripts' for automation. Group related commands in appropriate named terminals for better process management and continuity.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "sendCommand",
        "tags": [
          "terminal",
          "command",
          "execute",
          "create"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "terminalName": {
              "type": "string",
              "description": "The name of the terminal to send the command to (will be created if it doesn't exist)"
            },
            "command": {
              "type": "string",
              "description": "The command to execute in the terminal"
            },
            "workingDirectory": {
              "type": "string",
              "description": "Working directory for the terminal if it needs to be created (optional)"
            },
            "shellPath": {
              "type": "string",
              "description": "Path to the shell executable if the terminal needs to be created (optional)"
            },
            "captureOutput": {
              "type": "boolean",
              "description": "Whether to capture the command output (default: false)"
            }
          },
          "required": [
            "terminalName",
            "command"
          ]
        }
      },
      {
        "name": "terminal-tools_deleteTerminal",
        "displayName": "Delete Terminal",
        "userDescription": "Delete a named terminal",
        "modelDescription": "Deletes a named terminal, disposing of the terminal instance. Use this for proper cleanup when terminals are no longer needed or if the process cannot be cancelled.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "deleteTerminal",
        "tags": [
          "terminal",
          "delete",
          "remove"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the terminal to delete"
            }
          },
          "required": [
            "name"
          ]
        }
      },
      {
        "name": "terminal-tools_cancelCommand",
        "displayName": "Cancel Command in Terminal",
        "userDescription": "Send a cancel keypress (Ctrl+C) to a named terminal",
        "modelDescription": "Sends a cancel signal (Ctrl+C on Windows/Linux, Cmd+C on macOS) to interrupt any running command in the specified named terminal.",
        "canBeReferencedInPrompt": true,
        "toolReferenceName": "cancelCommand",
        "tags": [
          "terminal",
          "cancel",
          "interrupt",
          "stop",
          "ctrl+c"
        ],
        "inputSchema": {
          "type": "object",
          "properties": {
            "terminalName": {
              "type": "string",
              "description": "The name of the terminal to send the cancel signal to"
            }
          },
          "required": [
            "terminalName"
          ]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test",
    "version:patch": "node scripts/bump-version.js patch",
    "version:minor": "node scripts/bump-version.js minor",
    "version:major": "node scripts/bump-version.js major",
    "prepare-release": "npm run package && vsce package",
    "publish:marketplace": "vsce publish"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "24.x",
    "@types/vscode": "^1.102.0",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "@vscode/vsce": "^3.6.0",
    "esbuild": "^0.25.3",
    "eslint": "^9.25.1",
    "npm-run-all": "^4.1.5",
    "typescript": "^5.8.3"
  }
}
